 
===== /Users/alessandrocarli/CasAlta/casalta/static/options.js  =====
export const optionCount = 4;

export function formatNumber(number) {
    return number.toLocaleString('en-US', { minimumFractionDigits: 2, maximumFractionDigits: 2 });
}

export function createOptionElement(index) {
    return `
        <div class="option" id="option${index}">
            <h3>Option ${index}</h3>
            <div class="input-group">
                <label for="down-payment-percent-${index}">Down payment %:</label>
                <input type="number" id="down-payment-percent-${index}" value="20" step="1.00" min="0" max="100">
            </div>
            <div class="input-group">
                <label for="down-payment-amount-${index}">Down payment:</label>
                <input type="number" id="down-payment-amount-${index}" value="20000" step="10000" min="0">
            </div>
            <div class="input-group">
                <label for="amortization-${index}">Amortization (years):</label>
                <input type="number" id="amortization-${index}" value="20" min="1" max="40">
            </div>
            <div class="input-group">
                <label for="rate-${index}">Mortgage rate (%):</label>
                <input type="number" id="rate-${index}" value="2" step="0.1" min="1" max="20">
            </div>
            <div class="input-group">
                <label for="frequency-${index}">Payment frequency:</label>
                <select id="frequency-${index}">
                    <option value="monthly">Monthly</option>
                    <option value="bi-weekly">Bi-weekly</option>
                </select>
            </div>
            <div class="result">
                <label>Total mortgage:</label>
                <span id="total-mortgage-${index}"></span>
                <span id="total-mortgage-${index}-shared"></span>
            </div>
            <div class="result">
                <label>Mortgage Payment:</label>
                <span id="mortgage-payment-${index}"></span>
                <span id="mortgage-payment-${index}-shared"></span>
            </div>
        </div>
    `;
}

===== /Users/alessandrocarli/CasAlta/casalta/static/script.js  =====

import { optionCount, formatNumber, createOptionElement } from './options.js';
import { updateAmortizationSchedule } from './amortizations.js';

// Your existing code in script.js


function calculateMortgageDetails(price, percent, amount, amortization, rate, frequency) {
    const totalMortgage = price - amount;
    const periodicRate = (rate / 100) / (frequency === 'monthly' ? 12 : 26);
    const numberOfPayments = amortization * (frequency === 'monthly' ? 12 : 26);
    const mortgagePayment = totalMortgage * 
        (periodicRate * Math.pow(1 + periodicRate, numberOfPayments)) / 
        (Math.pow(1 + periodicRate, numberOfPayments) - 1);
    
    return { totalMortgage, mortgagePayment };
}



function updateCalculations() {
    const price = parseFloat(document.getElementById('price').value) || 0;
    const exchangeRate = parseFloat(document.getElementById('exchange-rate').value) || 1;

    for (let i = 1; i <= optionCount; i++) {
        const percentInput = document.getElementById(`down-payment-percent-${i}`);
        const amountInput = document.getElementById(`down-payment-amount-${i}`);
        const amortizationInput = document.getElementById(`amortization-${i}`);
        const rateInput = document.getElementById(`rate-${i}`);
        const frequencyInput = document.getElementById(`frequency-${i}`);
        
        const percent = parseFloat(percentInput.value.replace(/,/g, '')) || 0;
        const amount = parseFloat(amountInput.value.replace(/,/g, '')) || 0;
        const amortization = parseInt(amortizationInput.value) || 0;
        const rate = parseFloat(rateInput.value) || 0;
        const frequency = frequencyInput.value;

     
        // Update down payment amount or percent
        if (document.activeElement === percentInput) {
            updateAmountFromPercent(price, percent, amountInput);
        } else if (document.activeElement === amountInput) {
            updatePercentFromAmount(price, amount, percentInput);
        }

        const percentUpdated = parseFloat(percentInput.value.replace(/,/g, '')) || 0;
        const amountUpdated = parseFloat(amountInput.value.replace(/,/g, '')) || 0;

 
        const { totalMortgage, mortgagePayment } = calculateMortgageDetails(price, percentUpdated, amountUpdated, amortization, rate, frequency);
        const totalMortgageShared = totalMortgage / 2;
        const mortgagePaymentShared = mortgagePayment / 2;

        document.getElementById(`total-mortgage-${i}`).textContent = formatNumber(totalMortgage / exchangeRate);
        document.getElementById(`total-mortgage-${i}-shared`).textContent = `(shared: ${formatNumber(totalMortgageShared / exchangeRate)})`;
        document.getElementById(`mortgage-payment-${i}`).textContent = formatNumber(mortgagePayment / exchangeRate);
        document.getElementById(`mortgage-payment-${i}-shared`).textContent = `(shared: ${formatNumber(mortgagePaymentShared / exchangeRate)})`;
    }

    updateCloseCost();
    updateMonthlyExpenses();
    updateRevenues();
}

function updateAmountFromPercent(price, percent, amountInput) {
    const calculatedAmount = price * percent / 100;
     // Directly set value without formatting to see if it updates
    amountInput.value = calculatedAmount;
}

function updatePercentFromAmount(price, amount, percentInput) {
    const calculatedPercent = (amount / price) * 100;
     // Directly set value without formatting to see if it updates
    percentInput.value = calculatedPercent;
}


function updateCloseCost() {
    const scenario = parseInt(document.getElementById('scenario').value);
    const exchangeRate = parseFloat(document.getElementById('exchange-rate').value);
    const costs = {
        downPayment: parseFloat(document.getElementById(`down-payment-amount-${scenario}`).value),
        lawyerFees: parseFloat(document.getElementById('lawyer-fees').value),
        titleInsurance: parseFloat(document.getElementById('title-insurance').value),
        homeInspection: parseFloat(document.getElementById('home-inspection').value),
        appraisalFees: parseFloat(document.getElementById('appraisal-fees').value),
    };
    
    const sharedCosts = Object.fromEntries(
        Object.entries(costs).map(([key, value]) => [`${key}Shared`, value / 2])
    );

    const cashNeededToClose = Object.values(costs).reduce((sum, cost) => sum + cost, 0);
    const cashNeededToCloseShared = cashNeededToClose / 2;

    for (const [key, value] of Object.entries(costs)) {
        document.getElementById(key.replace(/([A-Z])/g, '-$1').toLowerCase()).textContent = formatNumber(value / exchangeRate);
        document.getElementById(`${key.replace(/([A-Z])/g, '-$1').toLowerCase()}-shared`).textContent = `(shared: ${formatNumber(sharedCosts[`${key}Shared`] / exchangeRate)})`;
    }

    document.getElementById('cash-needed-to-close').textContent = formatNumber(cashNeededToClose / exchangeRate);
    document.getElementById('cash-needed-to-close-shared').textContent = `(shared: ${formatNumber(cashNeededToCloseShared / exchangeRate)})`;
    updateMonthlyExpenses();
    updateRevenues() 
}

function updateMonthlyExpenses() {
    const expenses = {
        propertyTax: parseFloat(document.getElementById('property-tax').value),
        utilities: parseFloat(document.getElementById('utilities').value),
        propertyInsurance: parseFloat(document.getElementById('property-insurance').value) ,
        phone: parseFloat(document.getElementById('phone').value),
        cable: parseFloat(document.getElementById('cable').value),
        internet: parseFloat(document.getElementById('internet').value)
    };

    const totalMonthlyExpenses = Object.values(expenses).reduce((sum, expense) => sum + expense, 0);

    document.getElementById('monthly-expenses-total').textContent = formatNumber(totalMonthlyExpenses);

    const scenario = parseInt(document.getElementById('scenario').value);
    const mortgagePayment = parseFloat(document.getElementById(`mortgage-payment-${scenario}`).textContent.replace(/,/g, ''));
    const totalMonthlyCost = mortgagePayment + totalMonthlyExpenses;
    
    document.getElementById('total-monthly-cost').textContent = formatNumber(totalMonthlyCost);
    updateRevenues() 
}

function updateRevenues() {
    const rentedDays = parseFloat(document.getElementById('rented-days').value);
    const estimatedRentedPrice = parseFloat(document.getElementById('estimated-rented-price').value);
    const totalMonthlyCost = parseFloat(document.getElementById('total-monthly-cost').textContent.replace(/,/g, ''));

    // Calculate Total Revenue and Annual Profit
    const totalRevenue = rentedDays * estimatedRentedPrice;
    const annualCost = (totalMonthlyCost * 12);
    const annualProfit = totalRevenue - annualCost;

    // Update the UI
    document.getElementById('total-revenue').textContent = formatNumber(totalRevenue);
    document.getElementById('annual-cost').textContent = formatNumber(annualCost);
    document.getElementById('annual-profit').textContent = formatNumber(annualProfit);
}

// Call updateRevenues initially
updateRevenues();

document.addEventListener('DOMContentLoaded', function() {
    const optionsContainer = document.getElementById('options-container');
    for (let i = 1; i <= optionCount; i++) {
        optionsContainer.innerHTML += createOptionElement(i);
    }

    document.querySelectorAll('input, select').forEach(input => {
        input.addEventListener('input', updateCalculations);
    });

    updateCalculations(); // Initial calculation
}); 
 

// Call the function on scenario change and on page load
document.getElementById('scenario').addEventListener('change', updateAmortizationSchedule);
document.addEventListener('DOMContentLoaded', updateAmortizationSchedule);

===== /Users/alessandrocarli/CasAlta/casalta/static/amortizations.js  =====


import {  formatNumber } from './options.js';

let amortizationChart = null; // Variable to store the Chart instance

// Function to clear the existing chart
function clearChart() {
    if (amortizationChart) {
        amortizationChart.destroy();
        amortizationChart = null;
    }
}

// Function to draw the amortization chart
function drawAmortizationChart(years, totalPaidData, principalPaidData, interestPaidData, balanceData) {
    const ctx = document.getElementById('amortization-chart').getContext('2d');
    
    clearChart(); // Clear the previous chart instance

    amortizationChart = new Chart(ctx, {
        type: 'bar',
        data: {
            labels: years,
            datasets: [
                {
                    label: 'Principal Paid',
                    data: principalPaidData,
                    backgroundColor: 'rgba(54, 162, 235, 0.5)',
                    stack: 'stack1',
                    type: 'bar'
                },
                {
                    label: 'Interest Paid',
                    data: interestPaidData,
                    backgroundColor: 'rgba(255, 99, 132, 0.5)',
                    stack: 'stack1',
                    type: 'bar'
                },
                {
                    label: 'Balance',
                    type: 'line',
                    data: balanceData,
                    borderColor: 'rgba(75, 192, 192, 1)',
                    backgroundColor: 'rgba(75, 192, 192, 0.2)',
                    yAxisID: 'y-axis-2'
                }
            ]
        },
        options: {
            responsive: true,
            plugins: {
                legend: {
                    position: 'top'
                },
                tooltip: {
                    callbacks: {
                        label: function(tooltipItem) {
                            return `${tooltipItem.dataset.label}: $${tooltipItem.raw.toFixed(2)}`;
                        }
                    }
                }
            },
            scales: {
                x: {
                    title: {
                        display: true,
                        text: 'Year'
                    },
                    beginAtZero: true
                },
                y: {
                    title: {
                        display: true,
                        text: 'Amount ($)'
                    },
                    beginAtZero: true
                },
                'y-axis-2': {
                    type: 'linear',
                    position: 'right',
                    title: {
                        display: true,
                        text: 'Balance ($)'
                    },
                    beginAtZero: true
                }
            }
        }
    });
}

// Function to generate amortization schedule data
function generateAmortizationSchedule(price, amount, amortization, rate, frequency, appreciationRate) {
    const totalMortgage = price - amount;
    const periodicRate = (rate / 100) / (frequency === 'monthly' ? 12 : 26);
    const numberOfPayments = amortization * (frequency === 'monthly' ? 12 : 26);
    
    // Calculate monthly payment
    const monthlyPayment = totalMortgage * 
        (periodicRate * Math.pow(1 + periodicRate, numberOfPayments)) / 
        (Math.pow(1 + periodicRate, numberOfPayments) - 1);

    let balance = totalMortgage;
    let totalPaid = 0;
    let principalPaid = 0;
    let interestPaid = 0;
    let houseValue = price; // Initialize house value

    const years = [];
    const totalPaidData = [];
    const principalPaidData = [];
    const interestPaidData = [];
    const balanceData = [];
    const houseValueData = []; // Array to store house values

    for (let year = 1; year <= amortization; year++) {
        let yearTotalPaid = 0;
        let yearPrincipalPaid = 0;
        let yearInterestPaid = 0;

        // Update house value based on appreciation
        houseValue *= (1 + appreciationRate / 100);

        for (let month = 1; month <= 12; month++) {
            if (balance <= 0) break;

            const interest = balance * periodicRate;
            const principal = monthlyPayment - interest;
            yearTotalPaid += monthlyPayment;
            yearPrincipalPaid += principal;
            yearInterestPaid += interest;

            balance -= principal;
            if (balance < 0) balance = 0;

            totalPaid += monthlyPayment;
            principalPaid += principal;
            interestPaid += interest;
        }

        years.push(year);
        totalPaidData.push(yearTotalPaid);
        principalPaidData.push(yearPrincipalPaid);
        interestPaidData.push(yearInterestPaid);
        balanceData.push(balance);
        houseValueData.push(houseValue); // Store the house value for the year
    }

    return {
        years,
        totalPaidData,
        principalPaidData,
        interestPaidData,
        balanceData,
        houseValueData
    };
}


// Function to update the amortization schedule table and chart
export function updateAmortizationSchedule() {
    const price = parseFloat(document.getElementById('price').value);
    const scenario = parseInt(document.getElementById('scenario').value);
    const amount = parseFloat(document.getElementById(`down-payment-amount-${scenario}`).value);
    const amortization = parseInt(document.getElementById(`amortization-${scenario}`).value);
    const rate = parseFloat(document.getElementById(`rate-${scenario}`).value);
    const frequency = document.getElementById(`frequency-${scenario}`).value;
    const appreciationRate = parseFloat(document.getElementById('yearly-appreciation').value) || 0;

    const {
        years,
        totalPaidData,
        principalPaidData,
        interestPaidData,
        balanceData,
        houseValueData
    } = generateAmortizationSchedule(price, amount, amortization, rate, frequency, appreciationRate);

    const tableBody = document.getElementById('amortization-table').querySelector('tbody');
    tableBody.innerHTML = years.map((year, index) => `
        <tr>
            <td>${year}</td>
            <td>${formatNumber(totalPaidData[index])}</td>
            <td>${formatNumber(principalPaidData[index])}</td>
            <td>${formatNumber(interestPaidData[index])}</td>
            <td>${formatNumber(balanceData[index])}</td>
            <td>${formatNumber(houseValueData[index])}</td> <!-- New House Value Column -->
        </tr>
    `).join('');

    drawAmortizationChart(years, totalPaidData, principalPaidData, interestPaidData, balanceData);
}

===== /Users/alessandrocarli/CasAlta/casalta/app.py  =====
from flask import Flask, render_template

app = Flask(__name__)

@app.route('/')
def index():
    return render_template('index.html')

if __name__ == '__main__':
    app.run(debug=True)

===== /Users/alessandrocarli/CasAlta/casalta/templates/index.html  =====
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive Mortgage Calculator</title>
    <link rel="stylesheet" href="{{ url_for('static', filename='styles.css') }}">
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>

</head>
<body>
    <div class="container">
        <h1>Interactive Mortgage Calculator</h1>
        <div class="input-group">
            <label for="price">Price:</label>
            <input type="number" id="price" value="100000">
        </div>
        <div class="input-group">
            <label for="exchange-rate">Exchange Rate (Results):</label>
            <input type="number" id="exchange-rate" value="1" step="0.01" min="0">
        </div>
        <div class="input-group">
            <label for="yearly-appreciation">Yearly Appreciation Rate (%):</label>
            <input type="number" id="yearly-appreciation" step="0.01" value="0.2">
        </div>
 
        <div class="options" id="options-container">
            <!-- Options will be dynamically generated here -->
        </div>
        <div class="input-group">
            <label for="scenario">Down payment options:</label>
            <select id="scenario" onchange="updateCloseCost()">
                <option value="1">Scenario 1</option>
                <option value="2">Scenario 2</option>
                <option value="3">Scenario 3</option>
                <option value="4">Scenario 4</option>
            </select>
        </div>
       
        <h2>Financial Overview</h2>
        <div class="financial-overview">
            <div id="close-costs">
                <h3>Cash needed to close</h3>
                <div class="input-group">
                    <label>Down payment:</label>
                    <span id="down-payment"></span>
                    <span id="down-payment-shared"></span>
                </div>
                <div class="input-group">
                    <label>Lawyer fees:</label>
                    <input type="number" id="lawyer-fees" value="1000" onchange="updateCloseCost()">
                    <span id="lawyer-fees-shared"></span>
                </div>
                <div class="input-group">
                    <label>Title insurance:</label>
                    <input type="number" id="title-insurance" value="900" onchange="updateCloseCost()">
                    <span id="title-insurance-shared"></span>
                </div>
                <div class="input-group">
                    <label>Home inspection:</label>
                    <input type="number" id="home-inspection" value="500" onchange="updateCloseCost()">
                    <span id="home-inspection-shared"></span>
                </div>
                <div class="input-group">
                    <label>Appraisal fees:</label>
                    <input type="number" id="appraisal-fees" value="300" onchange="updateCloseCost()">
                    <span id="appraisal-fees-shared"></span>
                </div>
                <div class="input-group">
                    <label>Cash needed to close:</label>
                    <span id="cash-needed-to-close"></span>
                    <span id="cash-needed-to-close-shared"></span>
                </div>
            </div>

            <div id="monthly-expenses">
                <h3>Monthly expenses</h3>
                <div class="input-group">
                    <label for="property-tax">Property tax:</label>
                    <input type="number" id="property-tax" value="100" onchange="updateMonthlyExpenses()">
                </div>
                <div class="input-group">
                    <label for="utilities">Utilities:</label>
                    <input type="number" id="utilities" value="150" onchange="updateMonthlyExpenses()">
                </div>
                <div class="input-group">
                    <label for="property-insurance">Property Insurance:</label>
                    <input type="number" id="property-insurance" value="50" onchange="updateMonthlyExpenses()">
                </div>
                <div class="input-group">
                    <label for="phone">Phone:</label>
                    <input type="number" id="phone" value="50" onchange="updateMonthlyExpenses()">
                </div>
                <div class="input-group">
                    <label for="cable">Cable:</label>
                    <input type="number" id="cable" value="100" onchange="updateMonthlyExpenses()">
                </div>
                <div class="input-group">
                    <label for="internet">Internet:</label>
                    <input type="number" id="internet" value="60" onchange="updateMonthlyExpenses()">
                </div>
                <div class="input-group">
                    <label>Total Monthly Expenses:</label>
                    <span id="monthly-expenses-total"></span>
                </div>
                <div class="input-group">
                    <label>Total Monthly Cost:</label>
                    <span id="total-monthly-cost"></span>
                </div>
            </div>
            <div id="monthly-revenues">
                <h3>Monthly Revenues</h3>

                <div class="input-group">
                    <label for="rented-days">Number of rented days:</label>
                    <input type="number" id="rented-days" value="15" onchange="updateRevenues()">
                </div>
                <div class="input-group">
                    <label for="estimated-rented-price">Estimated rented price per day:</label>
                    <input type="number" id="estimated-rented-price" value="100" onchange="updateRevenues()">
                </div>
                <div class="input-group">
                    <label>Total Revenue:</label>
                    <span id="total-revenue"></span>
                </div>
                <div class="input-group">
                    <label>Annual Cost:</label>
                    <span id="annual-cost"></span>
                </div>
                <div class="input-group">
                    <label>Annual Profit:</label>
                    <span id="annual-profit"></span>
                </div>
                
            </div>            
        </div>
        <h2>Amortization Schedule</h2>
        <canvas id="amortization-chart" width="800" height="400"></canvas>

        <table id="amortization-table">
            <thead>
                <tr>
                    <th>Year</th>
                    <th>Total Paid</th>
                    <th>Principal Paid</th>
                    <th>Interest Paid</th>
                    <th>Balance</th>
                    <th>Appreciation</th>
                </tr>
            </thead>
            <tbody>
                <!-- Rows will be dynamically generated here -->
            </tbody>
        </table>
    </div>
    <script type="module" src="{{ url_for('static', filename='script.js') }}"></script>
</body>
</html>

